MODULE -> module IDENTIFIER; GLOBALS
GLOBALS -> ''
GLOBALS -> GLOBAL GLOBALS
GLOBALS -> extern GLOBAL GLOBALS
GLOBAL -> FUNCTION
GLOBAL -> DECLARATIONBLOCK ;
FUNCTION -> FUNCTIONHEADER FUNCTIONREST
FUNCTIONHEADER -> MODIFIERS IDENTIFIER : PARAMLIST => RETURNTYPE
FUNCTIONREST -> ;
FUNCTIONREST -> BLOCK
MODIFIERS -> ''
MODIFIERS -> start
PARAMLIST -> void
PARAMLIST -> PARAMBLOCK MOREPARAMBLOCK
MOREPARAMBLOCK -> ''
MOREPARAMBLOCK -> ; PARAMBLOCK MOREPARAMBLOCK
PARAMBLOCK -> TYPE PARAM MOREPARAM
MOREPARAM -> ''
MOREPARAM -> , PARAM MOREPARAM
PARAM -> REFERENCE IDENTIFIER DIMENSIONBLOCK
RETURNTYPE -> TYPE REFERENCE DIMENSIONBLOCK
REFERENCE -> ''
REFERENCE -> * REFERENCE
DIMENSIONBLOCK -> ''
DIMENSIONBLOCK -> [] DIMENSIONBLOCK
BLOCK -> { CODE }
CODE -> ''
CODE -> BLOCK CODE
CODE -> STATEMENT CODE
STATEMENT -> label IDENTIFIER;
STATEMENT -> ;
STATEMENT -> break ;
STATEMENT -> continue ;
STATEMENT -> if ( EXPRESSION ) BLOCK elseBLOCK
STATEMENT -> goto IDENTIFIER ;
STATEMENT -> while ( EXPRESSION ) do BLOCK
STATEMENT -> do BLOCK while ( EXPRESSION )
STATEMENT -> switch ( EXPRESSION ) { SWITCHCASES default BLOCK }
STATEMENT -> return EXPRESSION ;
STATEMENT -> EXPRESSION ;
STATEMENT -> DECLARATIONBLOCK ;
elseBLOCK -> ''
elseBLOCK -> else BLOCK
SWITCHCASES -> ''
SWITCHCASES -> case INTLITERAL BLOCK
DECLARATIONBLOCK -> TYPE DECLARATION RESTDECLARATION
RESTDECLARATION -> ''
RESTDECLARATION -> , DECLARATION RESTDECLARATION
DECLARATION -> REFERENCE IDENTIFIER INDEXBLOCK INITIALIZER
INDEXBLOCK -> ''
INDEXBLOCK -> [ INTLITERAL ] INDEXBLOCK
INITIALIZER -> ''
INITIALIZER -> = EXPRESSION

EXPRESSION -> LOGICALOR RESTEXPRESSION
RESTEXPRESSION -> ''
RESTEXPRESSION -> = LOGICALOR RESTEXPRESSION

LOGICALOR -> LOGICALAND RESTLOGICALOR
RESTLOGICALOR -> ''
RESTLOGICALOR -> || LOGICALAND RESTLOGICALOR

LOGICALAND -> BITWISEOR RESTLOGICALAND
RESTLOGICALAND -> ''
RESTLOGICALAND -> && BITWISEOR RESTLOGICALAND

BITWISEOR -> BITWISEXOR RESTBITWISEOR
RESTBITWISEOR -> ''
RESTBITWISEOR -> | BITWISEXOR RESTBITWISEOR

BITWISEXOR -> BITWISEAND RESTBITWISEXOR
RESTBITWISEXOR -> ''
RESTBITWISEXOR -> ^ BITWISEAND RESTBITWISEXOR

BITWISEAND -> EQUALITY RESTBITWISEAND
RESTBITWISEAND -> ''
RESTBITWISEAND -> & EQUALITY RESTBITWISEAND

EQUALITY -> RELATION RESTEQUALITY
RESTEQUALITY -> ''
RESTEQUALITY -> EQUALITYOPERATOR RELATION RESTEQUALITY

EQUALITYOPERATOR -> ==
EQUALITYOPERATOR -> !=

RELATION -> SHIFT RESTRELATION
RESTRELATION -> ''
RESTRELATION -> RELATIONOPERATOR SHIFT RESTRELATION

RELATIONOPERATOR -> <
RELATIONOPERATOR -> <=
RELATIONOPERATOR -> >
RELATIONOPERATOR -> >=

SHIFT -> ADDITION RESTSHIFT
RESTSHIFT -> '' 
RESTSHIFT -> SHIFTOPERATOR ADDITION RESTSHIFT

SHIFTOPERATOR -> <<
SHIFTOPERATOR -> >>

ADDITION -> MULTIPLICATION RESTADDITION
RESTADDITION -> ''
RESTADDITION -> ADDITIONOPERATOR MULTIPLICATION RESTADDITION
ADDITIONOPERATOR -> +
ADDITIONOPERATOR -> -
MULTIPLICATION -> UNARY3 RESTMULTIPLICATION
RESTMULTIPLICATION -> ''
RESTMULTIPLICATION -> MULTIPLICATIONOPERATOR UNARY3 RESTMULTIPLICATION
MULTIPLICATIONOPERATOR -> *
MULTIPLICATIONOPERATOR -> /
MULTIPLICATIONOPERATOR -> %

UNARY3 -> UNARY2
UNARY3 -> UNARY3OPERATOR UNARY2
UNARY3OPERATOR -> &
UNARY3OPERATOR -> *
UNARY3OPERATOR -> -

UNARY2 -> FACTOR
UNARY2 -> UNARY2OPERATOR FACTOR
UNARY2OPERATOR -> +
UNARY2OPERATOR -> -
UNARY2OPERATOR -> !

FACTOR -> IDENTIFIER APPLICATION
FACTOR -> IMMEDIATE
FACTOR -> ( EXPRESSION )

APPLICATION -> ''
APPLICATION -> [ EXPRESSION ] APPLICATION
APPLICATION -> ( EXPRESSION MOREEXPRESSION )
MOREEXPRESSION -> ''
MOREEXPRESSION -> , EXPRESSION MOREEXPRESSION
TYPE -> bool
TYPE -> char
TYPE -> float
TYPE -> int
TYPE -> untyped
IMMEDIATE -> true
IMMEDIATE -> false
IMMEDIATE -> CHAR_LITERAL
IMMEDIATE -> FLOAT_LITERAL
IMMEDIATE -> INT_LITERAL
IMMEDIATE -> STRING_LITERAL
