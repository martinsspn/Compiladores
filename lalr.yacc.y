%{
    int yylex(void);
    void yyerror(char *s){ EM_error(EM_tokPos, "%s", s); }
%}
%token KW_MODULE IDENTIFIER KW_EXTERN  KW_VOID KW_START KW_LABEL KW_BREAK KW_CONTINUE KW_IF KW_GOTO KW_WHILE DO KW_SWITCH KW_DEFAULT KW_RETURN KW_ELSE KW_CASE KW_BOOL KW_CHAR KW_DO KW_FLOAT KW_INT KW_UNTYPED KW_TRUE KW_FALSE INT FLOAT CHAR 
%start PROG
%left '+' '-'
%left '*' '/'
%left '!'
%%
PROG : KW_MODULE IDENTIFIER ';' GLOBALS

GLOBALS :  
        | GLOBAL GLOBALS
        | KW_EXTERN GLOBAL GLOBALS

GLOBAL : FUNCTION
       | DECLARATIONBLOCK ';'

FUNCTION : FUNCTIONHEADER FUNCTIONREST

FUNCTIONHEADER : MODIFIERS IDENTIFIER ':' PARAMLIST '-''>' RETURNTYPE

FUNCTIONREST : ';'
             | BLOCK

MODIFIERS : 
          | KW_START

PARAMLIST : KW_VOID
          | PARAMBLOCK MOREPARAMBLOCK

PARAMBLOCK : TYPE PARAM MOREPARAM

MOREPARAMBLOCK : 
               | ';' PARAMBLOCK MOREPARAMBLOCK

MOREPARAM : 
          | ',' PARAM MOREPARAM

PARAM : REFERENCE IDENTIFIER DIMENSIONBLOCK

RETURNTYPE : TYPE REFERENCE DIMENSIONBLOCK

REFERENCE :
          | '*' REFERENCE

DIMENSIONBLOCK : 
               | '['']' DIMENSIONBLOCK

BLOCK : '{' CODE '}'

CODE : 
     | BLOCK CODE
     | STATEMENT CODE

STATEMENT : KW_LABEL IDENTIFIER ';'
          | ';'
          | KW_BREAK ';'
          | KW_CONTINUE ';'
          | KW_IF '(' EXPRESSION ')' BLOCK elseBLOCK
          | KW_GOTO IDENTIFIER ';'
          | KW_WHILE '(' EXPRESSION ')' KW_DO BLOCK
          | KW_DO BLOCK KW_WHILE '(' EXPRESSION ')'
          | KW_SWITCH '(' EXPRESSION ')' '{' SWITCHCASES KW_DEFAULT BLOCK '}'
          | KW_RETURN EXPRESSION ';'
          | EXPRESSION ';'
          | DECLARATIONBLOCK ';'

elseBLOCK : 
          | KW_ELSE BLOCK

SWITCHCASES : 
            | KW_CASE INT BLOCK SWITCHCASES

DECLARATIONBLOCK : TYPE DECLARATION RESTDECLARATION

DECLARATION : REFERENCE IDENTIFIER INDEXBLOCK INITIALIZER

RESTDECLARATION : 
                | ',' DECLARATION RESTDECLARATION

INDEXBLOCK :
           | '[' INT ']' INDEXBLOCK

INITIALIZER : 
            | '=' EXPRESSION

EXPRESSION : LOGICALOR RESTEXPRESSION

RESTEXPRESSION : 
               | '=' LOGICALOR RESTEXPRESSION

LOGICALOR : LOGICALAND RESTLOGICALOR

RESTLOGICALOR : 
              | '|''|' LOGICALAND RESTLOGICALOR

LOGICALAND : BITWISEOR RESTLOGICALAND

RESTLOGICALAND : 
               | '&''&' BITWISEOR RESTLOGICALAND

BITWISEOR : BITWISEXOR RESTBITWISEOR

RESTBITWISEOR : 
              | '|' BITWISEXOR RESTBITWISEOR

BITWISEXOR : BITWISEAND RESTBITWISEXOR

RESTBITWISEXOR : 
               | '^' BITWISEAND RESTBITWISEXOR

BITWISEAND : EQUALITY RESTBITWISEAND

RESTBITWISEAND : 
               | '&' EQUALITY RESTBITWISEAND

EQUALITY : RELATION RESTEQUALITY

RESTEQUALITY : 
             | EQUALITYOPERATOR RELATION RESTEQUALITY

EQUALITYOPERATOR : '=''='
                 | '!''='

RELATION : SHIFT RESTRELATION

RESTRELATION : 
             | RELATIONOPERATOR SHIFT RESTRELATION

RELATIONOPERATOR : '<'
                 | '<''='
                 | '>'
                 | '>''='

SHIFT : ADDITION RESTSHIFT

RESTSHIFT : 
          | SHIFTOPERATOR ADDITION RESTSHIFT

SHIFTOPERATOR : '<''<'
              | '>''>'

ADDITION : MULTIPLICATION RESTADDITION

RESTADDITION : 
             | ADDITIONOPERATOR MULTIPLICATION RESTADDITION

ADDITIONOPERATOR : '+'
                 | '-'

MULTIPLICATION : UNARY3 RESTMULTIPLICATION

RESTMULTIPLICATION : 
                   | MULTIPLICATIONOPERATOR UNARY3 RESTMULTIPLICATION

MULTIPLICATIONOPERATOR : '*'
                       | '/'
                       | '%'

UNARY3 : UNARY2
       | '&' UNARY2
       | '*' UNARY2
       | '-' UNARY2

UNARY2 : FACTOR
       | '+' FACTOR
       | '-' FACTOR
       | '!' FACTOR

FACTOR : IDENTIFIER APPLICATION
       | IMMEDIATE
       | '(' EXPRESSION ')'

APPLICATION :
            | '[' EXPRESSION ']' APPLICATION
            | '(' EXPRESSION MOREEXPRESSION ')'

MOREEXPRESSION : 
               | ',' EXPRESSION MOREEXPRESSION

TYPE : KW_BOOL
     | KW_CHAR
     | KW_FLOAT
     | KW_INT

IMMEDIATE : KW_TRUE
          | KW_FALSE
          | CHAR
          | FLOAT
          | INT