module mergesort;

merge : int arr[], left, mid, right -> bool
{
    int i = 0;
    int j = 0;
    int k;
    int n1 = m - l + 1;
    int n2 = r - m;
    
    int L[n1];
    int R[n2];

    while( i < n1 ) do
    {
        L[i] = arr[ l + 1 ];
        i = i + 1;
    }

    while( i < n1 && j < n2 ) do{
        if ( L[i] <= R[j] ){
            arr[k] = L[i];
            i = i + 1;
        } else{
            arr[k] = R[j];
            j = j + 1;
        }
        k = k + 1;
    }
}

mergesort: int arr[], begin, end -> bool {
    if (begin < end){
        int m = begin + (end - begin) / 2;

        mergesort(arr, begin, m);
        mergesort(arr, m+1, end);

        merge(arr, begin, m, end);
    }
}

start main: void -> bool {
    int arr[6];
    array[0] = 12;
    array[1] = 11;
    array[2] = 13;
    array[3] = 5;
    array[4] = 6;
    array[5] = 7;


    int array_size = sizeof(array) / sizeof(array[0]);

    mergesort(array, 0, array_size - 1);
}